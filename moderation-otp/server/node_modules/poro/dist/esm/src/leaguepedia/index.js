import { __awaiter } from "tslib";
import axios from 'axios';
import axiosRetry from 'axios-retry';
import { generateUrl } from './generateUrl';
import { schemaMap } from './schema';
const LEAGUEPEDIA_BASE_URL = 'https://lol.fandom.com';
export class CargoClient {
    constructor({ metadataPrefix } = {}) {
        this.axiosInstance = axios.create({
            baseURL: LEAGUEPEDIA_BASE_URL,
        });
        this.metadataPrefix = metadataPrefix !== null && metadataPrefix !== void 0 ? metadataPrefix : '';
        axiosRetry(this.axiosInstance, {
            retryCondition(err) {
                var _a;
                const errCodes = ['ECONNRESET', 'ETIMEDOUT'];
                const errCode = (_a = err.code) !== null && _a !== void 0 ? _a : '';
                if (errCodes.includes(errCode)) {
                    return true;
                }
                return false;
            },
        });
    }
    spaceToUnderscore(obj) {
        // No index signature with a parameter of type 'string' was found on type '{}'.
        // https://stackoverflow.com/a/66406882/13151903
        const newObj = {};
        Object.entries(obj).forEach(([key, value]) => {
            newObj[key.replaceAll(' ', '_')] = value;
        });
        return newObj;
    }
    convert(obj, tables) {
        const newObj = {};
        tables.forEach((t) => {
            const schema = schemaMap[t];
            Object.entries(obj).forEach(([key, value]) => {
                if (!(key in schema))
                    return;
                const defaultValue = schema[key];
                switch (typeof defaultValue) {
                    case 'boolean': {
                        // leaguepedia use bit(1) to store boolean
                        newObj[key] = typeof value === 'number' ? Boolean(value) : null;
                        break;
                    }
                    case 'number': {
                        const n = defaultValue ? parseFloat(value) : parseInt(value);
                        newObj[key] = isNaN(n) ? null : n;
                        break;
                    }
                    case 'string': {
                        newObj[key] = value ? String(value) : null;
                        break;
                    }
                    case 'object': {
                        if (defaultValue instanceof Date) {
                            newObj[key] = value ? new Date(value + 'Z') : null;
                        }
                        else {
                            newObj[key] = value.map((item) => String(item));
                        }
                        break;
                    }
                    default: {
                        newObj[key] = value;
                    }
                }
            });
        });
        return newObj;
    }
    addPrefixToMetadata(obj) {
        // No index signature with a parameter of type 'string' was found on type '{}'.
        // https://stackoverflow.com/a/66406882/13151903
        let newObj = {};
        if (this.metadataPrefix === '') {
            newObj = obj;
        }
        else {
            Object.entries(obj).forEach(([key, value]) => {
                if (key.startsWith('_')) {
                    newObj[this.metadataPrefix + key] = value;
                }
                else {
                    newObj[key] = value;
                }
            });
        }
        return newObj;
    }
    query(parameter) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = yield generateUrl(parameter);
            const res = yield this.axiosInstance.get(url);
            return Object.assign(Object.assign({}, res), { data: res.data
                    // `spaceToUnderscore` should be executed first to guarantee object shape is as same as schema defined in `schemaMap`
                    .map(this.spaceToUnderscore.bind(this))
                    .map((item) => this.convert(item, parameter.tables))
                    .map(this.addPrefixToMetadata.bind(this)) });
        });
    }
}
