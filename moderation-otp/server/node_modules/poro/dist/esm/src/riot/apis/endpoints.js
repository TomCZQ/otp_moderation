export function createEndpoints(limiter) {
    return {
        // #region ACCOUNT-V1
        '/riot/account/v1/accounts/by-puuid/{puuid}': (generalRegion, realPath, path) => ({
            /* Get account by puuid */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}': (generalRegion, realPath, path) => ({
            /* Get account by riot id */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/riot/account/v1/accounts/me': (generalRegion, realPath, path) => ({
            /* Get account by access token */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}': (generalRegion, realPath, path) => ({
            /* Get active shard for a player */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region CHAMPION-MASTERY-V4
        '/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}': (generalRegion, realPath, path) => ({
            /* Get all champion mastery entries sorted by number of champion points descending. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}': (generalRegion, realPath, path) => ({
            /* Get a champion mastery by puuid and champion ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top': (generalRegion, realPath, path) => ({
            /* Get specified number of top champion mastery entries sorted by number of champion points descending. */
            get({ query }) {
                return limiter.execute(generalRegion, realPath, path, query);
            },
        }),
        '/lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}': (generalRegion, realPath, path) => ({
            /* Get a player's total champion mastery score, which is the sum of individual champion mastery levels. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region CHAMPION-V3
        '/lol/platform/v3/champion-rotations': (generalRegion, realPath, path) => ({
            /* Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST) */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region CLASH-V1
        '/lol/clash/v1/players/by-summoner/{summonerId}': (generalRegion, realPath, path) => ({
            /* Get players by summoner ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/clash/v1/teams/{teamId}': (generalRegion, realPath, path) => ({
            /* Get team by ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/clash/v1/tournaments': (generalRegion, realPath, path) => ({
            /* Get all active or upcoming tournaments. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/clash/v1/tournaments/by-team/{teamId}': (generalRegion, realPath, path) => ({
            /* Get tournament by team ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/clash/v1/tournaments/{tournamentId}': (generalRegion, realPath, path) => ({
            /* Get tournament by ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region LEAGUE-EXP-V4
        '/lol/league-exp/v4/entries/{queue}/{tier}/{division}': (generalRegion, realPath, path) => ({
            /* Get all the league entries. */
            get({ query }) {
                return limiter.execute(generalRegion, realPath, path, query);
            },
        }),
        // #endregion
        // #region LEAGUE-V4
        '/lol/league/v4/challengerleagues/by-queue/{queue}': (generalRegion, realPath, path) => ({
            /* Get the challenger league for given queue. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/league/v4/entries/by-summoner/{encryptedSummonerId}': (generalRegion, realPath, path) => ({
            /* Get league entries in all queues for a given summoner ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/league/v4/entries/{queue}/{tier}/{division}': (generalRegion, realPath, path) => ({
            /* Get all the league entries. */
            get({ query }) {
                return limiter.execute(generalRegion, realPath, path, query);
            },
        }),
        '/lol/league/v4/grandmasterleagues/by-queue/{queue}': (generalRegion, realPath, path) => ({
            /* Get the grandmaster league of a specific queue. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/league/v4/leagues/{leagueId}': (generalRegion, realPath, path) => ({
            /* Get league with given ID, including inactive entries. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/league/v4/masterleagues/by-queue/{queue}': (generalRegion, realPath, path) => ({
            /* Get the master league for given queue. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region LOL-CHALLENGES-V1
        '/lol/challenges/v1/challenges/config': (generalRegion, realPath, path) => ({
            /* List of all basic challenge configuration information (includes all translations for names and descriptions) */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/challenges/v1/challenges/percentiles': (generalRegion, realPath, path) => ({
            /* Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/challenges/v1/challenges/{challengeId}/config': (generalRegion, realPath, path) => ({
            /* Get challenge configuration (REST) */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}': (generalRegion, realPath, path) => ({
            /* Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER. */
            get({ query }) {
                return limiter.execute(generalRegion, realPath, path, query);
            },
        }),
        '/lol/challenges/v1/challenges/{challengeId}/percentiles': (generalRegion, realPath, path) => ({
            /* Map of level to percentile of players who have achieved it */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/challenges/v1/player-data/{puuid}': (generalRegion, realPath, path) => ({
            /* Returns player information with list of all progressed challenges (REST) */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region LOL-STATUS-V4
        '/lol/status/v4/platform-data': (generalRegion, realPath, path) => ({
            /* Get League of Legends status for the given platform. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region MATCH-V5
        '/lol/match/v5/matches/by-puuid/{puuid}/ids': (generalRegion, realPath, path) => ({
            /* Get a list of match ids by puuid */
            get({ query }) {
                return limiter.execute(generalRegion, realPath, path, query);
            },
        }),
        '/lol/match/v5/matches/{matchId}': (generalRegion, realPath, path) => ({
            /* Get a match by match id */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/match/v5/matches/{matchId}/timeline': (generalRegion, realPath, path) => ({
            /* Get a match timeline by match id */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region SPECTATOR-V5
        '/lol/spectator/v5/active-games/by-summoner/{encryptedPUUID}': (generalRegion, realPath, path) => ({
            /* Get current game information for the given puuid. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/spectator/v5/featured-games': (generalRegion, realPath, path) => ({
            /* Get list of featured games. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
        // #region SUMMONER-V4
        '/fulfillment/v1/summoners/by-puuid/{rsoPUUID}': (generalRegion, realPath, path) => ({
            /* Get a summoner by its RSO encrypted PUUID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/summoner/v4/summoners/by-account/{encryptedAccountId}': (generalRegion, realPath, path) => ({
            /* Get a summoner by account ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/summoner/v4/summoners/by-name/{summonerName}': (generalRegion, realPath, path) => ({
            /* Get a summoner by summoner name. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}': (generalRegion, realPath, path) => ({
            /* Get a summoner by PUUID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/summoner/v4/summoners/me': (generalRegion, realPath, path) => ({
            /* Get a summoner by access token. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        '/lol/summoner/v4/summoners/{encryptedSummonerId}': (generalRegion, realPath, path) => ({
            /* Get a summoner by summoner ID. */
            get() {
                return limiter.execute(generalRegion, realPath, path);
            },
        }),
        // #endregion
    };
}
