import { createEndpoints } from './endpoints';
import { Platform, Region } from './enums';
import { GeneralRegion, LimiterConfig } from './rate-limiter';
type Endpoints = ReturnType<typeof createEndpoints>;
type PathParametersUnion<P> = P extends `${string}{${infer Parameter}}${infer Tail}` ? Parameter | PathParametersUnion<Tail> : never;
declare const regionScopedPathPrefix: readonly ["/riot", "/lol/match/v5"];
type RegionScopedPathPrefix = typeof regionScopedPathPrefix[number];
type OriginPrefix<P> = P extends `${RegionScopedPathPrefix}${string}` ? [prefix?: Region] : [platform?: Platform];
type UrlParameters<P> = PathParametersUnion<P> extends never ? [...OriginPrefix<P>] : [
    {
        [key in PathParametersUnion<P>]: string | number;
    },
    ...OriginPrefix<P>
];
interface RiotClientConfig extends LimiterConfig {
    auth: string;
    platform?: Platform;
    region?: Region;
}
export declare class RiotClient {
    readonly axiosInstance: import("axios").AxiosInstance;
    private readonly limiter;
    private readonly endpoints;
    private readonly platform;
    private readonly region;
    constructor({ auth, platform, region, ...limiterConfig }: RiotClientConfig);
    path<Path extends keyof Endpoints>(path: Path, ...urlParameters: UrlParameters<Path>): ReturnType<{
        '/riot/account/v1/accounts/by-puuid/{puuid}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").AccountDto>>;
        };
        '/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").AccountDto>>;
        };
        '/riot/account/v1/accounts/me': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").AccountDto>>;
        };
        '/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<any>>;
        };
        '/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").ChampionMasteryDto[]>>;
        };
        '/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").ChampionMasteryDto>>;
        };
        '/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get({ query }: import("./inputs").GetTopChampionMasteriesInput): Promise<import("axios").AxiosResponse<import("./dtos").ChampionMasteryDto[]>>;
        };
        '/lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<number>>;
        };
        '/lol/platform/v3/champion-rotations': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").ChampionInfo>>;
        };
        '/lol/clash/v1/players/by-summoner/{summonerId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").PlayerDto[]>>;
        };
        '/lol/clash/v1/teams/{teamId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").TeamDto>>;
        };
        '/lol/clash/v1/tournaments': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").TournamentDto[]>>;
        };
        '/lol/clash/v1/tournaments/by-team/{teamId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").TournamentDto>>;
        };
        '/lol/clash/v1/tournaments/{tournamentId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").TournamentDto>>;
        };
        '/lol/league-exp/v4/entries/{queue}/{tier}/{division}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get({ query }: import("./inputs").LeagueEntryInput): Promise<import("axios").AxiosResponse<import("./dtos").LeagueEntryDTO[]>>;
        };
        '/lol/league/v4/challengerleagues/by-queue/{queue}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").LeagueListDTO>>;
        };
        '/lol/league/v4/entries/by-summoner/{encryptedSummonerId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").LeagueEntryDTO[]>>;
        };
        '/lol/league/v4/entries/{queue}/{tier}/{division}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get({ query }: import("./inputs").LeagueEntryInput): Promise<import("axios").AxiosResponse<import("./dtos").LeagueEntryDTO[]>>;
        };
        '/lol/league/v4/grandmasterleagues/by-queue/{queue}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").LeagueListDTO>>;
        };
        '/lol/league/v4/leagues/{leagueId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").LeagueListDTO>>;
        };
        '/lol/league/v4/masterleagues/by-queue/{queue}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").LeagueListDTO>>;
        };
        '/lol/challenges/v1/challenges/config': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").ChallengeConfigInfoDto[]>>;
        };
        '/lol/challenges/v1/challenges/percentiles': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<Record<number, Record<number, Record<any, number>>>>>;
        };
        '/lol/challenges/v1/challenges/{challengeId}/config': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").ChallengeConfigInfoDto>>;
        };
        '/lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get({ query }: import("./inputs").GetChallengeLeaderboardsInput): Promise<import("axios").AxiosResponse<import("./dtos").ApexPlayerInfoDto[]>>;
        };
        '/lol/challenges/v1/challenges/{challengeId}/percentiles': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<Record<any, number>>>;
        };
        '/lol/challenges/v1/player-data/{puuid}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").PlayerInfoDto>>;
        };
        '/lol/status/v4/platform-data': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").PlatformDataDto>>;
        };
        '/lol/match/v5/matches/by-puuid/{puuid}/ids': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get({ query }: import("./inputs").MatchIdsInput): Promise<import("axios").AxiosResponse<string[]>>;
        };
        '/lol/match/v5/matches/{matchId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").MatchDto>>;
        };
        '/lol/match/v5/matches/{matchId}/timeline': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<any>>;
        };
        '/lol/spectator/v5/active-games/by-summoner/{encryptedPUUID}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").CurrentGameInfo>>;
        };
        '/lol/spectator/v5/featured-games': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").FeaturedGames>>;
        };
        '/fulfillment/v1/summoners/by-puuid/{rsoPUUID}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").SummonerDTO>>;
        };
        '/lol/summoner/v4/summoners/by-account/{encryptedAccountId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").SummonerDTO>>;
        };
        '/lol/summoner/v4/summoners/by-name/{summonerName}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").SummonerDTO>>;
        };
        '/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").SummonerDTO>>;
        };
        '/lol/summoner/v4/summoners/me': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").SummonerDTO>>;
        };
        '/lol/summoner/v4/summoners/{encryptedSummonerId}': (generalRegion: GeneralRegion, realPath: string, path: string) => {
            get(): Promise<import("axios").AxiosResponse<import("./dtos").SummonerDTO>>;
        };
    }[Path]>;
}
export {};
