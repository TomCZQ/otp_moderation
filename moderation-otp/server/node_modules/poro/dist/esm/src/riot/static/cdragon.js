import { Version, VersionLanguage } from './utils';
export const CDRAGON_DOMAIN = 'cdn.communitydragon.org';
const CDRAGON_BASE_URL = `https://${CDRAGON_DOMAIN}`;
export const RAW_CDRAGON_DOMAIN = 'raw.communitydragon.org';
const RAW_CDRAGON_BASE_URL = `https://${RAW_CDRAGON_DOMAIN}`;
class Champion extends Version {
    constructor() {
        super(...arguments);
        this.urlPrefix = CDRAGON_BASE_URL + `/${this.version}`;
        this.squareIconPlaceholder = this.urlPrefix + '/champion/generic/square';
    }
    squareIcon(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/square`;
    }
    championData(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/data`;
    }
    baseSplashArt(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/splash-art`;
    }
    splashArtWithSkin(championIDorKey, skinId) {
        return (this.urlPrefix + `/champion/${championIDorKey}/splash-art/skin/${skinId}`);
    }
    baseCenteredSplashArt(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/splash-art/centered`;
    }
    centeredSplashArtWithSkin(championIDorKey, skinId) {
        return (this.urlPrefix +
            `/champion/${championIDorKey}/splash-art/centered/skin/${skinId}`);
    }
    baseTile(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/tile`;
    }
    tileWithSkin(championIDorKey, skinId) {
        return this.urlPrefix + `/champion/${championIDorKey}/tile/skin/${skinId}`;
    }
    basePortrait(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/portrait`;
    }
    portraitWithSkin(championIDorKey, skinId) {
        return (this.urlPrefix + `/champion/${championIDorKey}/portrait/skin/${skinId}`);
    }
    passiveIcon(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/ability-icon/passive`;
    }
    qAbilityIcon(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/ability-icon/q`;
    }
    wAbilityIcon(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/ability-icon/w`;
    }
    eAbilityIcon(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/ability-icon/e`;
    }
    ultimateAbilityIcon(championIDorKey) {
        return this.urlPrefix + `/champion/${championIDorKey}/ability-icon/r`;
    }
}
class ChampionSelect extends Version {
    constructor() {
        super(...arguments);
        this.urlPrefix = CDRAGON_BASE_URL + `/${this.version}`;
    }
    banSound(championIDorKey) {
        return (this.urlPrefix + `/champion/${championIDorKey}/champ-select/sounds/ban`);
    }
    lockinSound(championIDorKey) {
        return (this.urlPrefix + `/champion/${championIDorKey}/champ-select/sounds/choose`);
    }
    backgroundSound(championIDorKey) {
        return (this.urlPrefix + `/champion/${championIDorKey}/champ-select/sounds/sfx`);
    }
}
class Summoner extends Version {
    constructor() {
        super(...arguments);
        this.urlPrefix = CDRAGON_BASE_URL + `/${this.version}`;
        this.honorEmblemPlaceholder = this.urlPrefix + '/honor/emblem/generic';
    }
    honorEmblem(honorId) {
        return this.urlPrefix + `/honor/emblem/${honorId}`;
    }
    lockedHonorEmblem(honorId) {
        return this.urlPrefix + `/honor/emblem/${honorId}/locked`;
    }
    honorEmblemWithCheckpoints(honorId, level) {
        return this.urlPrefix + `/honor/emblem/${honorId}/level/${level}`;
    }
    profileIcon(profileIconId) {
        return this.urlPrefix + `/profile-icon/${profileIconId}`;
    }
}
class Game extends Version {
    constructor() {
        super(...arguments);
        this.urlPrefix = CDRAGON_BASE_URL + `/${this.version}`;
    }
    wardIcon(wardId) {
        return this.urlPrefix + `/ward/${wardId}`;
    }
    wardShadow(wardId) {
        return this.urlPrefix + `/ward/${wardId}/shadow`;
    }
}
export class CommunityDragon extends VersionLanguage {
    constructor(version, language) {
        super(version, language);
        this.champion = new Champion(this.version);
        this.championSelect = new ChampionSelect(this.version);
        this.summoner = new Summoner(this.version);
        this.game = new Game(this.version);
        // `latest` will not be affected
        this.version = this.version.split('.').slice(0, 2).join('.');
        this.language = this.language.toLowerCase();
        if (this.language === 'en_us') {
            this.language = 'default';
        }
    }
    meta(file) {
        return (RAW_CDRAGON_BASE_URL +
            `/${this.version}/plugins/rcp-be-lol-game-data/global/${this.language}/v1/${file}.json`);
    }
    tier(tier) {
        return (RAW_CDRAGON_BASE_URL +
            `/${this.version}/plugins/rcp-fe-lol-static-assets/global/default/images/ranked-mini-regalia/${tier.toLowerCase()}.png`);
    }
}
