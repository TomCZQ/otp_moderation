"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.general = void 0;
const enums_1 = require("../apis/enums");
const ddragon_1 = require("./ddragon");
/**
 * When looking up specific seasons, queues, maps and modes it is important
 * to use the correct ids.
 */
exports.general = {
    doc(file) {
        return `https://static.developer.riotgames.com/docs/lol/${file}.json`;
    },
    /**
     * You can find all valid Data Dragon versions in the versions file.
     * Typically there's only a single build of Data Dragon for a given patch,
     * however occasionally there will be additional builds. This typically
     * occurs when there's an error in the original build. As such, you should
     * always use the most recent Data Dragon version for a given patch for the
     * best results.
     */
    versions: ddragon_1.DDRAGON_BASE_URL + '/api/versions.json',
    /**
     * Data Dragon versions aren't always equivalent to the League of Legends
     * client version in a region. You can find the version each region is using
     * via the realms files.
     */
    realm(region) {
        var _a;
        const platforms = Object.values(enums_1.Platform);
        const platformIndex = platforms.findIndex((platform) => platform === region);
        const platformName = (_a = Object.keys(enums_1.Platform)[platformIndex]) !== null && _a !== void 0 ? _a : region;
        return ddragon_1.DDRAGON_BASE_URL + `/realms/${platformName.toLowerCase()}.json`;
    },
    /**
     * Data Dragon provides localized versions of each of the data files in
     * languages supported by the client. Below is a list of the languages
     * supported by Data Dragon, which you can also retrieved from the Data
     * Dragon languages file.
     */
    languages: ddragon_1.DDRAGON_BASE_URL + '/cdn/languages.json',
};
