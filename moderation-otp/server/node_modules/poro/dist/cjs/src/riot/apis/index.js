"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RiotClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const axios_retry_1 = tslib_1.__importDefault(require("axios-retry"));
const endpoints_1 = require("./endpoints");
const enums_1 = require("./enums");
const rate_limiter_1 = require("./rate-limiter");
const regionScopedPathPrefix = ['/riot', '/lol/match/v5'];
// type-safe Object.keys
function keys(obj) {
    return Object.keys(obj);
}
class RiotClient {
    constructor(_a) {
        var { auth, platform, region } = _a, limiterConfig = tslib_1.__rest(_a, ["auth", "platform", "region"]);
        this.axiosInstance = axios_1.default.create();
        this.axiosInstance.defaults.headers.common['X-Riot-Token'] = auth;
        this.limiter = new rate_limiter_1.RiotRateLimiter(this.axiosInstance, limiterConfig);
        this.endpoints = (0, endpoints_1.createEndpoints)(this.limiter);
        this.platform = platform;
        this.region = region;
        (0, axios_retry_1.default)(this.axiosInstance, {
            retryCondition(err) {
                var _a, _b, _c;
                const errCodes = ['ECONNRESET', 'ETIMEDOUT'];
                const statusCodes = [403, 429, 503];
                const errCode = (_a = err.code) !== null && _a !== void 0 ? _a : '';
                const statusCode = (_c = (_b = err.response) === null || _b === void 0 ? void 0 : _b.status) !== null && _c !== void 0 ? _c : 0;
                if (errCodes.includes(errCode)) {
                    return true;
                }
                if (statusCodes.includes(statusCode)) {
                    return true;
                }
                return false;
            },
            retryDelay(retryCount, err) {
                var _a;
                if (((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 429) {
                    const retryAfter = err.response.headers['retry-after'];
                    if (retryAfter) {
                        return retryAfter * 1000;
                    }
                }
                return axios_retry_1.default.exponentialDelay(retryCount);
            },
        });
    }
    path(path, ...urlParameters) {
        var _a, _b;
        let realPath = path;
        const pathParam = urlParameters[0];
        let originPrefix = urlParameters[1];
        if (typeof pathParam === 'object') {
            keys(pathParam).forEach((paramName) => {
                realPath = realPath.replace(`{${paramName}}`, String(pathParam[paramName]));
            });
        }
        else {
            originPrefix = pathParam;
        }
        const isRegionScoped = regionScopedPathPrefix.some((prefix) => path.startsWith(prefix));
        if (isRegionScoped) {
            originPrefix !== null && originPrefix !== void 0 ? originPrefix : (originPrefix = (_a = this.region) !== null && _a !== void 0 ? _a : enums_1.Region.AMERICAS);
        }
        else {
            originPrefix !== null && originPrefix !== void 0 ? originPrefix : (originPrefix = (_b = this.platform) !== null && _b !== void 0 ? _b : enums_1.Platform.NA);
        }
        return this.endpoints[path](originPrefix, encodeURI(realPath), path);
    }
}
exports.RiotClient = RiotClient;
